import logging
import sys
import os
import calendar
from datetime import date, datetime, timedelta
from dateutil.relativedelta import relativedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    filters, ConversationHandler, CallbackQueryHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import psycopg2
from psycopg2.extras import RealDictCursor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ application –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
app = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING, TYPING_REPLY, SELECTING_START_DATE, SELECTING_END_DATE, SELECTING_CLEAR_DATE = range(5)

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
PRESET_STATUSES = ["‚úÖ –ù–∞ —Ä–∞–±–æ—Ç–µ", "üè† –î–æ–º–∞", "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", "ü§í –ë–æ–ª–µ—é", "‚úàÔ∏è –í –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ"]

# ========== –ö–ê–õ–ï–ù–î–ê–†–¨ ==========
def create_calendar(year=None, month=None):
    now = datetime.now()
    if year is None: year = now.year
    if month is None: month = now.month

    prev_month = (month - 1) if month > 1 else 12
    prev_year = year - 1 if month == 1 else year
    next_month = (month + 1) if month < 12 else 1
    next_year = year + 1 if month == 12 else year

    keyboard = [
        [InlineKeyboardButton(f"{month}/{year}", callback_data="ignore")]
    ]
    keyboard.append([
        InlineKeyboardButton("–ü–Ω", callback_data="ignore"),
        InlineKeyboardButton("–í—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°—Ä", callback_data="ignore"),
        InlineKeyboardButton("–ß—Ç", callback_data="ignore"),
        InlineKeyboardButton("–ü—Ç", callback_data="ignore"),
        InlineKeyboardButton("–°–±", callback_data="ignore"),
        InlineKeyboardButton("–í—Å", callback_data="ignore")
    ])

    first_weekday = datetime(year, month, 1).weekday()
    days_in_month = (datetime(year, month % 12 + 1, 1) - timedelta(days=1)).day if month < 12 else 31

    week = []
    for _ in range(first_weekday):
        week.append(InlineKeyboardButton(" ", callback_data="ignore"))
    for day in range(1, days_in_month + 1):
        week.append(InlineKeyboardButton(str(day), callback_data=f"cal:{year}-{month:02d}-{day:02d}"))
        if len(week) == 7:
            keyboard.append(week)
            week = []
    while len(week) < 7:
        week.append(InlineKeyboardButton(" ", callback_data="ignore"))
    if week:
        keyboard.append(week)

    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev:{prev_year}-{prev_month:02d}"),
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"today"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next:{next_year}-{next_month:02d}")
    ])

    return InlineKeyboardMarkup(keyboard)

# ========== –†–ê–ë–û–¢–ê –° –ë–î ==========
def get_db_connection():
    return psycopg2.connect(
        host=os.getenv("DB_HOST"),
        port=int(os.getenv("DB_PORT")),
        database=os.getenv("DB_NAME"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASS")
    )

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            chat_id BIGINT,
            is_active BOOLEAN DEFAULT TRUE
        )
    ''')
    cur.execute('''
        CREATE TABLE IF NOT EXISTS statuses (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            chat_id BIGINT,
            status_text TEXT NOT NULL,
            date DATE NOT NULL
        )
    ''')
    cur.execute('''
        CREATE UNIQUE INDEX IF NOT EXISTS idx_user_date ON statuses (user_id, date)
    ''')
    conn.commit()
    cur.close()
    conn.close()

def add_user(user_id, username, chat_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO users (user_id, username, chat_id)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id) DO NOTHING
    ''', (user_id, username, chat_id))
    conn.commit()
    cur.close()
    conn.close()

def get_active_users(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞."""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute('SELECT user_id, username FROM users WHERE chat_id = %s AND is_active = TRUE', (chat_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return [(row['user_id'], row['username']) for row in result]

def save_status_for_date(user_id, chat_id, status_text, target_date):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO statuses (user_id, chat_id, status_text, date)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (user_id, date)
        DO UPDATE SET status_text = EXCLUDED.status_text, chat_id = EXCLUDED.chat_id
    ''', (user_id, chat_id, status_text, target_date))
    conn.commit()
    cur.close()
    conn.close()

def save_status_range(user_id, chat_id, status_text, start_date, end_date):
    current = start_date
    while current <= end_date:
        save_status_for_date(user_id, chat_id, status_text, current)
        current += timedelta(days=1)

def delete_user_status_today(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        DELETE FROM statuses
        WHERE user_id = %s AND date = CURRENT_DATE
    ''', (user_id,))
    deleted = cur.rowcount
    conn.commit()
    cur.close()
    conn.close()
    return deleted > 0

def delete_user_status_by_date(user_id, target_date):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        DELETE FROM statuses
        WHERE user_id = %s AND date = %s
    ''', (user_id, target_date))
    deleted = cur.rowcount
    conn.commit()
    cur.close()
    conn.close()
    return deleted > 0

def delete_all_user_statuses(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        DELETE FROM statuses
        WHERE user_id = %s
    ''', (user_id,))
    deleted = cur.rowcount
    conn.commit()
    cur.close()
    conn.close()
    return deleted

def get_statuses_last_week():
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute('''
        SELECT u.username, s.status_text, s.date
        FROM statuses s
        JOIN users u ON s.user_id = u.user_id
        WHERE s.date >= CURRENT_DATE - INTERVAL '7 days'
        ORDER BY s.date DESC, u.username
    ''')
    result = cur.fetchall()
    cur.close()
    conn.close()
    return [(row['username'], row['status_text'], row['date']) for row in result]

# ========== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–ü–†–û–° ==========
async def daily_poll_job():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)."""
    global app
    if app is None:
        logger.error("Application not initialized!")
        return

    try:
        today = date.today()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π (0=–ü–Ω, 6=–í—Å)
        if today.weekday() >= 5:  # 5=–°–±, 6=–í—Å
            logger.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π ‚Äî –æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            return

        conn = get_db_connection()
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute('SELECT user_id, chat_id FROM users WHERE is_active = TRUE')
        users = cur.fetchall()
        cur.close()
        conn.close()

        for user_id, chat_id in users:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                conn_check = get_db_connection()
                cur_check = conn_check.cursor()
                cur_check.execute('''
                    SELECT 1 FROM statuses 
                    WHERE user_id = %s AND date = %s
                ''', (user_id, today))
                status_exists = cur_check.fetchone() is not None
                cur_check.close()
                conn_check.close()

                if status_exists:
                    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {today} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
                keyboard = [[status] for status in PRESET_STATUSES] + [["‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)
                await app.bot.send_message(
                    chat_id=user_id,
                    text="üìÜ –ö–∞–∫ —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–µ–≥–æ–¥–Ω—è?",
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ daily_poll_job: {e}")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    add_user(user.id, user.username or user.first_name, chat_id)

    keyboard = [
        ["/start", "/setstatus"],
        ["/calendar", "/status"],
        ["/clearstatus", "/clearbydate"],
        ["/clearall"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "üîπ /setstatus ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üîπ /calendar ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø–µ—Ä–∏–æ–¥\n"
        "üîπ /status ‚Äî —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–∞–Ω–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üîπ /clearstatus ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üîπ /clearbydate ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–∞—Ç—É (—á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å)\n"
        "üîπ /clearall ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
        reply_markup=reply_markup
    )

async def show_status_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    statuses = get_statuses_last_week()
    if not statuses:
        await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.")
    else:
        msg = "üìÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        current_date = None
        for username, status, date_val in statuses:
            if current_date != date_val:
                current_date = date_val
                msg += f"\nüóìÔ∏è {current_date}:\n"
            msg += f"  üë§ {username}: {status}\n"
        await update.message.reply_text(msg)

async def clear_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if delete_user_status_today(user_id):
        await update.message.reply_text("üóëÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª—ë–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –∑–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def clear_by_date_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["mode"] = "clear"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=create_calendar())
    return SELECTING_CLEAR_DATE

async def clear_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    deleted_count = delete_all_user_statuses(user_id)
    if deleted_count > 0:
        await update.message.reply_text(f"üóëÔ∏è –í—Å–µ –≤–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã —É–¥–∞–ª–µ–Ω—ã ({deleted_count} –∑–∞–ø–∏—Å–µ–π).")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.")

async def set_status_manually(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[status] for status in PRESET_STATUSES] + [["‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=reply_markup)
    return CHOOSING

async def status_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return TYPING_REPLY
    if text in PRESET_STATUSES:
        save_status_for_date(update.effective_user.id, update.effective_chat.id, text, date.today())
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω–æ–≤–ª—ë–Ω!")
        return ConversationHandler.END
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    return CHOOSING

async def custom_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    save_status_for_date(update.effective_user.id, update.effective_chat.id, update.message.text, date.today())
    await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–±–Ω–æ–≤–ª—ë–Ω!")
    return ConversationHandler.END

# ========== –ö–ê–õ–ï–ù–î–ê–†–¨ ==========
async def calendar_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:", reply_markup=create_calendar())
    return SELECTING_START_DATE

async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "ignore":
        return
    if data == "today":
        today = date.today()
        await query.edit_message_reply_markup(reply_markup=create_calendar(today.year, today.month))
        return
    if data.startswith("prev:") or data.startswith("next:"):
        _, ym = data.split(":")
        year, month = map(int, ym.split("-"))
        await query.edit_message_reply_markup(reply_markup=create_calendar(year, month))
        return
    if data.startswith("cal:"):
        _, date_str = data.split(":", 1)
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        
        # –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if context.user_data.get("mode") == "clear":
            user_id = query.from_user.id
            if delete_user_status_by_date(user_id, selected_date):
                await query.edit_message_text(f"üóëÔ∏è –í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ {selected_date} —É–¥–∞–ª—ë–Ω.")
            else:
                await query.edit_message_text(f"‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ {selected_date}.")
            context.user_data.clear()
            return ConversationHandler.END
        
        # –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)
        if context.user_data.get("start_date") is None:
            context.user_data["start_date"] = selected_date
            await query.edit_message_text(f"–ù–∞—á–∞–ª–æ: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:", reply_markup=create_calendar(selected_date.year, selected_date.month))
            return SELECTING_END_DATE
        else:
            start_date = context.user_data["start_date"]
            end_date = selected_date
            if end_date < start_date:
                await query.edit_message_text("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞.\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–Ω–æ–≤–∞:", reply_markup=create_calendar(start_date.year, start_date.month))
                return SELECTING_END_DATE
            context.user_data["end_date"] = end_date
            keyboard = [[status] for status in PRESET_STATUSES] + [["‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await query.message.reply_text(
                f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å {start_date} –ø–æ {end_date}?\n–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:",
                reply_markup=reply_markup
            )
            return CHOOSING

async def status_for_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return TYPING_REPLY
    start_date = context.user_data["start_date"]
    end_date = context.user_data["end_date"]
    save_status_range(update.effective_user.id, update.effective_chat.id, text, start_date, end_date)
    await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω —Å {start_date} –ø–æ {end_date}!")
    context.user_data.clear()
    return ConversationHandler.END

async def custom_status_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    start_date = context.user_data["start_date"]
    end_date = context.user_data["end_date"]
    save_status_range(update.effective_user.id, update.effective_chat.id, update.message.text, start_date, end_date)
    await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω —Å {start_date} –ø–æ {end_date}!")
    context.user_data.clear()
    return ConversationHandler.END

# ========== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å ==========
async def handle_poll_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    text = update.message.text
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if text == "–û—Ç–º–µ–Ω–∞" and context.user_data.get("awaiting_custom_status"):
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.pop("awaiting_custom_status", None)
        return
    
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if context.user_data.get("awaiting_custom_status"):
        save_status_for_date(user_id, chat_id, text, date.today())
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        context.user_data.pop("awaiting_custom_status", None)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if text in PRESET_STATUSES:
        save_status_for_date(user_id, chat_id, text, date.today())
        await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π"
    if text == "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        context.user_data["awaiting_custom_status"] = True
        return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    keyboard = [
        ["/start", "/setstatus"],
        ["/calendar", "/status"],
        ["/clearstatus", "/clearbydate"],
        ["/clearall"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=reply_markup
    )

# ========== –ó–ê–ü–£–°–ö ==========
async def post_init(application: Application) -> None:
    global app
    app = application
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    scheduler.add_job(daily_poll_job, 'cron', hour=9, minute=0)
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –≤ 9:00 –ø–æ –ú–æ—Å–∫–≤–µ")

def main():
    init_db()
    TOKEN = os.getenv("TELEGRAM_TOKEN")

    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (/setstatus)
    manual_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("setstatus", set_status_manually)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_chosen)],
            TYPING_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_status)],
        },
        fallbacks=[],
        per_user=True
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    period_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("calendar", calendar_start)],
        states={
            SELECTING_START_DATE: [CallbackQueryHandler(calendar_handler)],
            SELECTING_END_DATE: [CallbackQueryHandler(calendar_handler)],
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_for_period)],
            TYPING_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, custom_status_period)],
        },
        fallbacks=[],
        per_user=True
    )

    clear_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("clearbydate", clear_by_date_start)],
        states={
            SELECTING_CLEAR_DATE: [CallbackQueryHandler(calendar_handler)],
        },
        fallbacks=[],
        per_user=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", show_status_all))
    application.add_handler(CommandHandler("clearstatus", clear_status))
    application.add_handler(CommandHandler("clearall", clear_all))
    
    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ—Ç–æ–º –æ–±—â–∏–π
    application.add_handler(manual_conv_handler)
    application.add_handler(period_conv_handler)
    application.add_handler(clear_conv_handler)
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_poll_response))

    application.run_polling()

if __name__ == '__main__':
    main()
